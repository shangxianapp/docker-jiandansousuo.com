pipeline {
    agent any

    options {
        timestamps()
    }

    stages {
        stage('Clone jiandansousuo.com') {
            steps {
                checkout \
                    changelog: false,
                    poll: false,
                    scm: [
                        $class: 'GitSCM',
                        branches: [
                            [name: '*/master']
                        ],
                        doGenerateSubmoduleConfigurations: false,
                        extensions: [
                            [
                                $class: 'CloneOption',
                                noTags: true,
                                reference: '',
                                shallow: true
                            ],
                            [
                                $class: 'RelativeTargetDirectory',
                                relativeTargetDir: 'www'
                            ]
                        ],
                        submoduleCfg: [],
                        userRemoteConfigs: [
                            [
                                credentialsId: 'shangxianapp-github-xuexb-ssh-key',
                                url: 'git@github.com:jiandansousuo/jiandansousuo.com.git'
                            ]
                        ]
                    ]
            }
        }

        stage('Build html') {
            steps {
                nodejs('Node.js-11.9.0') {
                    sh "yarn -v && node -v"
                    sh "cd www && yarn install && yarn build"
                }
            }
        }

        stage('Sync html') {
            steps {
                sshPublisher(
                    publishers: [
                        sshPublisherDesc(
                            configName: 'sg02',
                            transfers: [
                                sshTransfer(
                                    cleanRemote: true,
                                    excludes: '',
                                    execCommand: 'echo "sync success"',
                                    execTimeout: 120000,
                                    flatten: false,
                                    makeEmptyDirs: false,
                                    noDefaultExcludes: false,
                                    patternSeparator: '[, ]+',
                                    remoteDirectory: "$WWWROOT_DIR/jiandansousuo.com",
                                    remoteDirectorySDF: false,
                                    removePrefix: 'www/public',
                                    sourceFiles: 'www/public/**/*'
                                )
                            ],
                            usePromotionTimestamp: false,
                            useWorkspaceInPromotion: false,
                            verbose: false
                        )
                    ]
                )
            }
        }

        stage('Reload nginx') {
            steps {
                sh "mv nginx.conf jiandansousuo.com.conf"
                sshPublisher(
                    publishers: [
                        sshPublisherDesc(
                            configName: 'sg02',
                            transfers: [
                                sshTransfer(
                                    cleanRemote: false,
                                    excludes: '',
                                    execCommand: "/bin/sh $DOCKER_NGINX_DIR/reload.sh",
                                    execTimeout: 120000,
                                    flatten: false,
                                    makeEmptyDirs: false,
                                    noDefaultExcludes: false,
                                    patternSeparator: '[, ]+',
                                    remoteDirectory: "$DOCKER_NGINX_VHOST_DIR",
                                    remoteDirectorySDF: false,
                                    removePrefix: '',
                                    sourceFiles: 'jiandansousuo.com.conf'
                                )
                            ],
                            usePromotionTimestamp: false,
                            useWorkspaceInPromotion: false,
                            verbose: false
                        )
                    ]
                )
            }
        }
    }

    post {
        always {
            deleteDir()
        }
    }
}